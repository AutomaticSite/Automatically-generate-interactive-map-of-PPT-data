# -*- coding: utf-8 -*-
"""
Created on Sat Mar 28 18:46:11 2020
ppt数据地图
@author: 浩海泛舟
"""
import re as 包_正则
import os as 包_系统工具
import shutil as 包_文件高级操作
import zipfile as 包_压缩工具
import hashlib as 包_哈希工具


def 方法_获取文件md5(文件路径):
    md5工具 = 包_哈希工具.md5()   #创建md5对象
    with open(文件路径,'rb') as 文件:
        while True:
            内容 = 文件.read(4096)
            if not 内容:
                break
            md5工具.update(内容)  #更新md5对象

    return md5工具.hexdigest()
              

def 方法_文件解包(ppt地图,临时文件路径):
    md5码 = 'b335a06ccc492e128fd68fb36c2ca296'
    校检码 = 1
    try:
        文件md5码 = 方法_获取文件md5(ppt地图)
        if 文件md5码 == md5码 :
            校检码 = 1
        else:
            校检码 = 0
            print('\n','ppt地图文件校检出错,ppt地图文件已经被修改,请重新下载!')
    except:
        校检码 = 0
        print('\n','ppt地图文件校检出错,ppt地图文件丢失,请重新下载!')
    if 校检码 == 1 :
        try:
            包_文件高级操作.rmtree(临时文件路径,True)
        except:
            pass
        try:
            压缩档内表 = 包_压缩工具.ZipFile(ppt地图, 'r')
            for 文件 in 压缩档内表.namelist():
                压缩档内表.extract(文件, 临时文件路径)
            压缩档内表.close()
            #包_系统工具.remove('./%s'%压缩文件名)
        except:
            校检码 = 0
            print('\n','ppt地图文件解压出错,ppt地图文件损坏,请重新下载!')        
    return 校检码



def 方法_文件打包(文件夹路径):
    #检检查文件路径是否存在,存在则运行,不存在则警告并退出
    if 包_系统工具.path.exists(文件夹路径):
    	#压缩文件夹
        修改文件 = 文件夹路径
        包_文件高级操作.make_archive(修改文件, "zip", 文件夹路径)
        压缩文件 = 修改文件+'.zip'
        ppt文件 = 修改文件 + '.pptx'
        try:
            包_系统工具.remove(ppt文件)
        except:
            pass        
        包_系统工具.rename(压缩文件,ppt文件)
    else:
    	print('文件夹不存在!')


def 方法_读取csv文件(文件路径):
    数据文件 = open(文件路径, "r")
    文件数据 = []
    #行数据 = 数据文件.readlines()
    for 数据 in 数据文件:
        数据 = 数据.replace('\n','')
        数据 = 数据.split(',')
        文件数据.append(数据)
    # 关闭打开的文件
    数据文件.close()
    文件数据 = 文件数据[1:]
    # 数据格式为 : [['湖北', '67801'],....] ,使用时要转换数字类型
    return 文件数据

def 方法_配置处理(配置数据):
    配置数据字典 = {}
    for 数据 in 配置数据:
        if 数据[0] == 'ppt标题':
            配置数据字典['ppt标题'] = 数据[1]
        elif 数据[0] == '数据单位':
            配置数据字典['数据单位'] = 数据[1]
        elif 数据[0] == '背景图片路径':
            配置数据字典['背景图片路径'] = 数据[1]
        else : 
            if '以下' in 数据[1]:
                上限数据 = 数据[2].replace(']"','')
                数据表示 = 上限数据+' 以下'
                判断命令 = '数据 <='+上限数据
            elif '以上' in 数据[2]:
                下限数据 = 数据[1].replace('"[','')
                数据表示 = 下限数据+' 以上'
                判断命令 = '数据 >='+下限数据
            else:                
                下限数据 = 数据[1].replace('"[','')
                上限数据 = 数据[2].replace(']"','')
                if 上限数据 == 下限数据:
                    数据表示 = 下限数据
                    判断命令 = '数据 ==' + 下限数据
                else:
                    数据表示 = 下限数据 + ' 到 ' + 上限数据 
                    判断命令 = 下限数据 + ' <= 数据 <=' + 上限数据
            配置数据字典[数据[0]] = [数据表示,判断命令]
    return 配置数据字典

def 方法_分类处理(配置数据字典,文件数据):
    分类集 = ['分类0','分类1','分类2','分类3','分类4','分类5','分类6']
    for 每省数据 in 文件数据:
        try:
            数据 = int(每省数据[1])
        except:
            数据 = float(每省数据[1])
        数据分类 = '没有分类'
        for 分类 in 分类集:
            判断命令 = 配置数据字典[分类][1]
            if 判断命令 != '':
                if eval(判断命令):
                    数据分类 = 分类
                    break
        每省数据.append(数据分类)        
    return 文件数据

def 方法_ppt页读取(文件路径):
    ppt文件 = open(文件路径,'r',encoding='utf-8')
    ppt = ppt文件.read()
    ppt文件.close()
    return ppt

def 方法_ppt页写入(文件路径,写入内容):
    ppt文件 = open(文件路径,'w',encoding='utf-8')
    ppt文件.write(写入内容)
    ppt文件.close
    #print(文件路径,'写入完成')
    return

def 方法_地图颜色修改(修改颜色,省份,ppt内容):
    #print(省份)
    正则匹配后段 = r'</a:solidFill><a:ln w='
    地图匹配规则 = 包_正则.compile(省份+r'_地图(.*?)'+正则匹配后段)
    地图匹配内容 = 包_正则.findall(地图匹配规则, ppt内容)
    #if 每省数据[0] == '海南':
    #    print(地图匹配内容)
    匹配内容 = 地图匹配内容[0] + 正则匹配后段
    原内容 = 省份 + '_地图' + 匹配内容
    颜色匹配规则 = 包_正则.compile(r'<a:solidFill>(.*?)'+正则匹配后段)
    颜色匹配内容 = 包_正则.findall(颜色匹配规则, 原内容)
    原颜色内容 = r'<a:solidFill>' + 颜色匹配内容[0] + 正则匹配后段
    修改颜色内容 = r'<a:solidFill>' + 修改颜色 + 正则匹配后段
    修改内容 = 原内容.replace(原颜色内容,修改颜色内容)
    return 原内容,修改内容
    

def 方法_字体颜色修改(修改颜色,省份,ppt内容翻转):
    前段 = '</a:ln><a:solidFill>'
    后段 = '</a:rPr><a:t>' + 省份 + r'</a:t>'
    前段翻转 = 前段[::-1]
    后段翻转 = 后段[::-1]
    匹配规则翻转 = 包_正则.compile(后段翻转+'(.*?)'+前段翻转)
    匹配内容翻转 = 包_正则.findall(匹配规则翻转, ppt内容翻转)
    匹配内容 = 匹配内容翻转[0][::-1]
    匹配内容 = 前段 + 匹配内容 + 后段
    提取颜色规则 = 包_正则.compile(前段 + '(.*?)</a:solidFill>')
    提取颜色内容 = 包_正则.findall(提取颜色规则,匹配内容)
    原颜色内容 = 前段 + 提取颜色内容[0]
    新颜色内容 = 前段 + 修改颜色
    修改内容 = 匹配内容.replace(原颜色内容,新颜色内容)
    return 匹配内容,修改内容

def 方法_图例标签修改(ppt内容,配置数据字典):
    #分类0-6
    for 序号 in range(7):
        数字转中文字典 = {'0':'零','1':'一','2':'二','3':'三','4':'四','5':'五','6':'六'}
        序号中文 = 数字转中文字典[str(序号)]
        分类 = '分类'+str(序号)
        分类配置 = 配置数据字典[分类]
        print(分类配置)
        原标识 = '分类%s标签'%序号中文
        修改标识 = 分类配置[0]
        print(修改标识)
        ppt内容 = ppt内容.replace(原标识,修改标识)
    return ppt内容
        
    
def 方法_ppt文件修改(ppt内容,分级数据,配置数据字典):
    字体颜色字典 = {'分类0':'<a:srgbClr val="000000"/>',
              '分类1':'<a:srgbClr val="000000"/>',
              '分类2':'<a:srgbClr val="000000"/>',
              '分类3':'<a:srgbClr val="000000"/>',
              '分类4':'<a:srgbClr val="FFFFFF"/>',
              '分类5':'<a:srgbClr val="FFFFFF"/>',
              '分类6':'<a:srgbClr val="FFFFFF"/>'}
    颜色分级字典 = {'分类0':'<a:srgbClr val="FFFFFF"/>',
              '分类1':'<a:srgbClr val="FFF1D4"/>',
              '分类2':'<a:srgbClr val="FCD39F"/>',
              '分类3':'<a:srgbClr val="FF8673"/>',
              '分类4':'<a:srgbClr val="F54444"/>',
              '分类5':'<a:srgbClr val="B81418"/>',
              '分类6':'<a:srgbClr val="741700"/>'}
    ppt内容翻转 = ppt内容[::-1]
    ppt内容 = 方法_图例标签修改(ppt内容,配置数据字典)
    for 每省数据 in 分级数据:
        #print(每省数据)
        地图颜色 = 颜色分级字典[每省数据[2]]
        字体颜色 = 字体颜色字典[每省数据[2]]
        if 每省数据[0] in ['上海','天津','澳门','香港','台湾']:
            字体颜色 = '<a:srgbClr val="000000"/>'
        原内容,修改内容 = 方法_地图颜色修改(地图颜色,每省数据[0],ppt内容)
        ppt内容 = ppt内容.replace(原内容,修改内容)
        原字体颜色,修改字体颜色 = 方法_字体颜色修改(字体颜色,每省数据[0],ppt内容翻转)
        ppt内容 = ppt内容.replace(原字体颜色,修改字体颜色)
        ppt内容 = ppt内容.replace('中国疫情地图',配置数据字典['ppt标题'])
    return ppt内容

def 方法_标签数据修改(ppt内容,省份,数据,单位):
    前段 = 省份 + '_标签'
    后段 = '123456</a:t>'
    修改后段 = '%s</a:t>'%(str(数据)+单位)
    标签匹配规则 = 包_正则.compile(前段+r'(.*?)'+后段)
    标签匹配内容 = 包_正则.findall(标签匹配规则, ppt内容)
    原内容 = 前段 + 标签匹配内容[0] + 后段
    修改内容 = 前段 + 标签匹配内容[0] + 修改后段
    return 原内容,修改内容
    

def 方法_ppt每页修改(ppt内容,省份,数据,单位):
    修改颜色 = '<a:srgbClr val="45CFFE"/>'
    省名页数字典 = {'新疆':1,'甘肃':2,'内蒙古':3,'黑龙江':4,'吉林':5,'辽宁':6,'北京':7,'天津':8,'河北':9,'山西':10,
              '宁夏':11,'陕西':12,'青海':13,'西藏':14,'四川':15,'湖北':16,'河南':17,'山东':18,'江苏':19,'上海':20,
              '安徽':21,'浙江':22,'江西':23,'湖南':24,'贵州':25,'云南':26,'广西':27,'广东':28,'福建':29,'海南':30,
              '香港':31,'澳门':32,'台湾':33,'重庆':34}
    原内容,修改内容 = 方法_地图颜色修改(修改颜色,省份,ppt内容)
    修改页内容 = ppt内容.replace(原内容,修改内容)
    标签原内容,标签修改内容 = 方法_标签数据修改(修改页内容,省份,数据,单位)
    修改页内容 = 修改页内容.replace(标签原内容,标签修改内容)
    标签隐藏标识 = 'name="%s_标签" hidden="1"'%省份
    标签显示标识 = 'name="%s_标签" hidden="0"'%省份
    修改页内容 = 修改页内容.replace(标签隐藏标识,标签显示标识)
    修改页文件名 = 'slide%s.xml'%省名页数字典[省份]
    return 修改页文件名,修改页内容
    
def 方法_ppt文件页写入(ppt内容,分级数据,配置数据字典,ppt路径):
    单位 = 配置数据字典['数据单位']
    for 每省数据 in 分级数据:
        省份 = 每省数据[0]
        数据 = 每省数据[1]

        修改页文件名,修改页内容 = 方法_ppt每页修改(ppt内容,省份,数据,单位)
        修改文件路径 = ppt路径 + 修改页文件名
        方法_ppt页写入(修改文件路径,修改页内容)
        print(省份,'ppt页修改写入完成!')
    return 

def 方法_背景图片修改(配置数据字典,原图路径):
    #必须为png图片
    新图路径 = 配置数据字典['背景图片路径']
    if 新图路径 != '':
        try:
            包_文件高级操作.copyfile(新图路径, 原图路径)
        except:
            print('背景更改失败,请检查路径是否正确!')
    else:
        pass
    return
        
ppt地图文件 ='地图ppt.zip'
    
数据文件路径 = '各省数据.csv'
配置文件路径 = '配置文件.csv'
文件数据 = 方法_读取csv文件(数据文件路径)
配置数据 = 方法_读取csv文件(配置文件路径)
配置数据字典 = 方法_配置处理(配置数据)
分级数据 = 方法_分类处理(配置数据字典,文件数据)
print(分级数据)

#原ppt路径 = './地图ppt'
处理ppt路径 = './数据地图'
ppt路径 = 处理ppt路径 + '/ppt/slides/'
ppt页文件 = 'slide35.xml'
原背景路径 = 处理ppt路径 + '/ppt/media/image1.png'
效检码 = 方法_文件解包(ppt地图文件,处理ppt路径)
if 效检码 == 1:
    #包_文件高级操作.copytree(原ppt路径, 处理ppt路径)
    ppt页路径 = ppt路径 + ppt页文件
    ppt内容 = 方法_ppt页读取(ppt页路径)
    ppt内容 = 方法_ppt文件修改(ppt内容,分级数据,配置数据字典)
    方法_ppt页写入(ppt页路径,ppt内容)
    print('修改内容写入完成!')
    方法_ppt文件页写入(ppt内容,分级数据,配置数据字典,ppt路径)
    方法_背景图片修改(配置数据字典,原背景路径)
    方法_文件打包(处理ppt路径)
    #删除临时复制文件夹
    包_文件高级操作.rmtree(处理ppt路径,True)
    input('\n 成功生成PPT,按回车键完成并退出! \n')
else:
    input('\n 程序终止,请检测错误再重新运行,按回车键退出! \n')
    

    
    
    
    
    
    
    
    
